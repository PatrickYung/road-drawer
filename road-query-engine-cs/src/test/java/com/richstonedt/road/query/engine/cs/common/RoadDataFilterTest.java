/*
 * 广州丰石科技公司有限公司拥有本软件版权2017并保留所有权利。
 *  Copyright 2017, Guangzhou Rich Stone Data Technologies Company Limited,
 * All rights reserved.
 *
 */

package com.richstonedt.road.query.engine.cs.common;

import com.richstonedt.road.query.engine.model.road.GaoDeRoad;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * <b><code>RoadDataFilterTest</code></b>
 * <p>
 * class_comment
 * </p>
 * <b>Create Time:</b> 2017/2/8 10:24
 *
 * @author Hetian Zhu
 * @version 0.1.0
 * @since road-query-engine-cs 0.1.0
 */

@RunWith(SpringJUnit4ClassRunner.class)
public class RoadDataFilterTest {

    /**
     * test convertToFuzzyRoadName
     *
     * @since road-query-engine-cs 0.1.0
     */
    @Test
    public void convertToFuzzyRoadName() throws Exception {

    }

    /**
     * test covertToRoadTypeName
     *
     * @since road-query-engine-cs 0.1.0
     */
    @Test
    public void covertToRoadTypeName() throws Exception {

    }

    /**
     * test convertToGaoDeRoadFromJson
     *
     * @since road-query-engine-cs 0.1.0
     */
    @Test
    public void convertToGaoDeRoadFromJson() throws Exception {
        JSONObject json = JSONObject.fromObject("{\"status\":\"1\",\"info\":\"OK\",\"infocode\":\"10000\",\"count\":\"1\",\"suggestion\":{\"keywords\":[],\"cities\":[]},\"roads\":[{\"id\":\"020F49F01104359\",\"name\":\"体育西路\",\"citycode\":\"020\",\"width\":\"8\",\"type\":\"主要道路（城市主干道）\",\"center\":\"113.321989,23.141073\",\"polylines\":[\"113.3215386,23.1411975;113.3215422,23.14105778\",\"113.3216617,23.14120139;113.321665,23.14106389\",\"113.321665,23.14106389;113.3216675,23.1406975;113.3216706,23.14041222;113.321685,23.13902833\",\"113.3217708,23.13903944;113.3217692,23.13805528\",\"113.3215142,23.13647083;113.3215186,23.13703667\",\"113.3215928,23.13646722;113.3215956,23.13703028\",\"113.3215139,23.13535917;113.3215142,23.13647083\",\"113.3215903,23.13535444;113.3215928,23.13646722\",\"113.3215186,23.13703667;113.3215156,23.13799\",\"113.3215156,23.13799;113.3215092,23.13881694\",\"113.3215847,23.13801139;113.3215956,23.13703028\",\"113.321685,23.13902833;113.3216886,23.13823444;113.3216894,23.13803278\",\"113.3215092,23.13881694;113.3215206,23.13958806\",\"113.3215206,23.13958806;113.3215047,23.1406825;113.3214972,23.14097194;113.3215422,23.14105778\",\"113.32142,23.13360222;113.3214456,23.13358472;113.3214731,23.13355694;113.3214886,23.13353639;113.3214992,23.13350944;113.321505,23.13344778\",\"113.3217692,23.13805528;113.32178,23.13769194;113.3217689,23.13536389\",\"113.3213106,23.13384472;113.321405,23.13388611;113.3214414,23.1339225;113.3214731,23.13396417;113.3215033,23.13401;113.3215372,23.13406111;113.321555,23.13410444;113.3215692,23.13415194;113.3215797,23.13422556;113.3215897,23.13441806\",\"113.3215897,23.13441806;113.3215897,23.13446667;113.3215903,23.13535444\",\"113.3216842,23.13535611;113.3216733,23.13420306;113.3216747,23.13417222;113.3216786,23.13414972;113.3216831,23.13413167;113.32169,23.13411417;113.3217028,23.13408917;113.3217131,23.13407167;113.3217267,23.13404972\",\"113.3217267,23.13404972;113.3217556,23.13399556;113.321785,23.13395083;113.3218133,23.13391194;113.3218556,23.13387167;113.3219311,23.13382639\",\"113.3217708,23.13903944;113.3217906,23.13999056;113.3217661,23.14081222;113.3217739,23.14088583;113.3218014,23.14092111;113.3218297,23.14095222;113.3218561,23.14097528;113.3219894,23.14107389\",\"113.3215139,23.13535917;113.32149,23.13429778;113.3214833,23.13413639;113.3214656,23.13405028;113.3214233,23.13396556;113.3213733,23.13389833;113.3213106,23.13384472\",\"113.3217689,23.13536389;113.32178,23.134265;113.3217864,23.13407389;113.3218103,23.13398667;113.3219311,23.13382639\",\"113.3215422,23.14105778;113.3215722,23.14084806;113.3215811,23.14065083;113.3216064,23.13969694;113.3215992,23.13902361\",\"113.3215992,23.13902361;113.3215847,23.13801139\",\"113.3216894,23.13803278;113.3216875,23.13703028\",\"113.3216875,23.13703028;113.3216864,23.13645861\",\"113.3216864,23.13645861;113.3216842,23.13535611\",\"113.321505,23.13344778;113.3214992,23.13341694;113.3214756,23.13295833;113.3214503,23.13246806\",\"113.3208436,23.12783472;113.3209569,23.12790333;113.32104,23.12795083;113.3210969,23.12799667;113.3212181,23.12808861\",\"113.3213117,23.13002667;113.3213306,23.13052528\",\"113.3214033,23.13001917;113.3214233,23.13053556\",\"113.3212181,23.12808861;113.3212419,23.12834944;113.3212697,23.128895\",\"113.3212697,23.128895;113.3212872,23.12934444;113.3213117,23.13002667\",\"113.3213453,23.12889417;113.3213692,23.12935889\",\"113.3213692,23.12935889;113.3214033,23.13001917\",\"113.3214492,23.12935111;113.3214825,23.13001833\",\"113.3214678,23.128065;113.3214169,23.12815833;113.3214042,23.12819056;113.3213958,23.12822472;113.3213928,23.12826139;113.3214067,23.12853333;113.3214108,23.12863028\",\"113.3215419,23.12934111;113.3215106,23.12862667\",\"113.3215106,23.12862667;113.3214678,23.128065\",\"113.3214233,23.13053556;113.3214317,23.13068694;113.3214586,23.1311625;113.3214589,23.13117111\",\"113.3214825,23.13001833;113.3215094,23.13058222\",\"113.3215094,23.13058222;113.3215372,23.1311625\",\"113.3216272,23.13116056;113.3216,23.13057833\",\"113.3216,23.13057833;113.3215419,23.12934111\",\"113.3214589,23.13117111;113.3214686,23.13142667;113.3214692,23.13143583\",\"113.3214503,23.13246806;113.3214078,23.13186722;113.3213831,23.13143778\",\"113.3213831,23.13143778;113.3213306,23.13052528\",\"113.3214108,23.12863028;113.321415,23.12872833;113.3214236,23.128885\",\"113.3214236,23.128885;113.3214492,23.12935111\",\"113.3212181,23.12808861;113.3212758,23.12816361;113.3212964,23.12820472;113.3213086,23.128235;113.3213131,23.12826556;113.3213267,23.12853528;113.3213319,23.12863444\",\"113.3213319,23.12863444;113.3213453,23.12889417\",\"113.3215372,23.1311625;113.3215497,23.13143028\",\"113.3216272,23.13116056;113.3217178,23.1324575\",\"113.3215497,23.13143028;113.3215697,23.13186639;113.3216072,23.13246333\",\"113.3216072,23.13246333;113.3216342,23.13288972;113.3216356,23.13294056\",\"113.3216356,23.13294056;113.3216358,23.13294889;113.3216392,23.13306528\",\"113.3217178,23.1324575;113.3217247,23.13254889;113.3217497,23.13293611\",\"113.3217497,23.13293611;113.32175,23.13294194;113.3217739,23.13331028;113.3217867,23.13337722;113.3218228,23.13345972;113.3219675,23.13366694\",\"113.3215436,23.13293639;113.3215442,23.13295417;113.3215583,23.13335556;113.3215578,23.13337861;113.3215528,23.13340056;113.3215447,23.13341944;113.321505,23.13344778\",\"113.3214692,23.13143583;113.3214931,23.13186667;113.3215267,23.13247306\",\"113.3215267,23.13247306;113.3215281,23.13249806;113.3215436,23.13293639\",\"113.3217883,23.12774222;113.3217097,23.12778194;113.3216194,23.12783889;113.3216092,23.12784944;113.3215522,23.12790861;113.3215025,23.12798667;113.3214678,23.128065\",\"113.3216392,23.13306528;113.3216753,23.13347861;113.3216753,23.13347972;113.3216836,23.1335025;113.3216931,23.13352667;113.3217056,23.13354972;113.3217169,23.13356222;113.3217214,23.13356722;113.3217444,23.13358361;113.3217628,23.13359222;113.3217872,23.13360056;113.3219675,23.13366694\"]}]}\n");
        Assert.assertNotNull(json);
        JSONArray roadJsonArr = json.getJSONArray("roads");
        List<JSONObject> roadList = new ArrayList<>();
        for (int i = 0; i < roadJsonArr.size(); i++) {
            roadList.add(roadJsonArr.getJSONObject(i));
        }
        Map<String,GaoDeRoad> result =  RoadDataFilter.convertToGaoDeRoadFromJson("020",roadList,50);
        Assert.assertNotNull(result);
        Assert.assertTrue(result.keySet().contains("020F49F01104359"));
        Assert.assertEquals(227,result.get("020F49F01104359").getCoordinates().size());
        Assert.assertNull(RoadDataFilter.convertToGaoDeRoadFromJson("020",new ArrayList<JSONObject>(),50));
    }
}